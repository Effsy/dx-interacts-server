/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dxi.server;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.generated.Contract2;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.gas.StaticGasProvider;


public class App {
    public String getGreeting() {
        return "Hello world.";
    }
    
    private static final StaticGasProvider gasProvider = new StaticGasProvider(BigInteger.ZERO, DefaultGasProvider.GAS_LIMIT);
    
    public static void main(String[] args)
    throws Exception {
        System.out.println(new App().getGreeting());
        
        
        Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/

        web3.ethAccounts().flowable().subscribe(x -> {
            for(var e : x.getAccounts()) {
                System.out.println(e);
            }
        });
        
        var accounts = web3.ethAccounts().send().getAccounts();
        var ctm1 = new ClientTransactionManager(web3, accounts.get(0));

        Contract2 contract = Contract2.deploy(web3, ctm1, gasProvider).send();

        var result = contract.renderHelloWorld().send();
        System.out.println(result);

        
    }
}
