/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dxi.server;

import java.io.IOException;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.gas.StaticGasProvider;


public class App {
    private static final Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/
    private static final StaticGasProvider gasProvider = new StaticGasProvider(BigInteger.ZERO, DefaultGasProvider.GAS_LIMIT);
    
    public static List<String> getAccounts() throws IOException {
        return web3.ethAccounts().send().getAccounts();
    }

    private static BigInteger toWei(Long ethValue) {
        var weiValue = BigInteger.valueOf(ethValue).multiply(BigInteger.valueOf(10).pow(18));
        return weiValue;
    }

    public static void main(String[] args) throws Exception {
        var accounts = getAccounts();
        var ctm1 = new ClientTransactionManager(web3, accounts.get(0));
        // var ctm2 = new ClientTransactionManager(web3, accounts.get(1));

        String dutchExchangeAddress = "0x2a504B5e7eC284ACa5b6f49716611237239F0b97";
        String dxInteractsAddress = "0x4e71920b7330515faf5EA0c690f1aD06a85fB60c";
        String wethAddress = "0xf204a4Ef082f5c04bB89F7D5E6568B796096735a";
        String gnoAddress = "0x2C2B9C9a4a25e24B174f26114e8926a9f2128FE4";

        HashMap<String, String> contractName = new HashMap<>() {{
            put(dutchExchangeAddress.toUpperCase(), "DutchExchange");
            put(dxInteractsAddress.toUpperCase(), "DxInteracts");
            put(wethAddress.toUpperCase(), "Weth");
            put(gnoAddress.toUpperCase(), "gno");
        }};

        // to call functions with different accounts, choose a different ClientTransactionManager
        DutchExchange dx = new DutchExchange(dutchExchangeAddress, web3, ctm1, gasProvider);
        DxInteracts dxi = new DxInteracts(dxInteractsAddress, web3, ctm1, gasProvider);
        TokenGNO gno = new TokenGNO(gnoAddress, web3, ctm1, gasProvider);
        // EtherToken weth = new EtherToken(wethAddress, web3, ctm1, gasProvider);
        
        // 20 ether
        var startingETH = toWei(20L);
        // 50e18 GNO tokens
        var startingGNO = toWei(50L);

        // Transfering initial supply of GNO to dxi
        System.out.println(gno.isValid());
        System.out.println(gno.balanceOf(accounts.get(0)).send());
        gno.transfer(dxi.getContractAddress(), startingGNO).send();
        // Deposit GNO into the DutchExchange
        dxi.depositToken(gnoAddress, startingGNO).send();
        // Deposit 20 Ether into the DutchExchange as WETH (dxi converts it for you)
        dxi.depositEther(startingETH).send();
        
        var startBlock = DefaultBlockParameter.valueOf("earliest");
        var endBlock = DefaultBlockParameter.valueOf("latest");
        
        dx.newTokenPairEventFlowable(startBlock, endBlock).subscribe(e -> {
            System.out.println();
            System.out.print("New Token Pair. ");
            System.out.print("buy token: " + contractName.get(e.buyToken.toUpperCase()) + ", sell token: " + contractName.get(e.sellToken.toUpperCase()));
            System.out.println();
            
            // Post WETH sell order on auction
            var auctionIndex = dx.getAuctionIndex(wethAddress, gnoAddress).send();
            var sellOrderAmount = BigInteger.valueOf(10000L);
            dxi.postSellOrder(wethAddress, gnoAddress, auctionIndex, sellOrderAmount).send();
        });
        
        dx.newSellOrderEventFlowable(startBlock, endBlock).subscribe(e -> {
            System.out.println();
            System.out.print("New Sell Order. ");
            System.out.print("buy token: " + contractName.get(e.buyToken.toUpperCase()) + ", sell token: " + contractName.get(e.sellToken.toUpperCase()) + ", amount: " + e.amount);
            System.out.println();
        });

        // This prints out all dutchX deposits. Suitable for dev environment
        dx.newDepositEventFlowable(startBlock, endBlock).subscribe(e -> {
            var tx = web3.ethGetTransactionByHash(e.log.getTransactionHash()).send();
            var dtx = tx.getTransaction().get();
            String _from = dtx.getFrom();

            System.out.println();
            System.out.print("DutchExchange deposit. ");
            System.out.println("token: " + contractName.get(e.token.toUpperCase()) + ", amount: " + e.amount);
        });
        
        // Add token pair WETH <-> GNO on DutchExchange
        var token1Funding = toWei(10L);
        var token2Funding = BigInteger.valueOf(0L);
        var initialClosingPriceNum = BigInteger.valueOf(2L);
        var initialClosingPriceDen = BigInteger.valueOf(1L);
        // dxi.addTokenPair(wethAddress, gnoAddress, token1Funding, token2Funding, initialClosingPriceNum, initialClosingPriceDen).send();
    }
}
